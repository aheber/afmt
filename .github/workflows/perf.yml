name: Hyperfine Benchmark and mdBook Deploy
on:
  push:
    branches:
      - main
jobs:
  benchmark:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Build Release
      run: cargo build --release
    - name: Install hyperfine
      run: sudo apt-get install hyperfine
    - name: Download MetadataService.cls
      run: |
        wget https://raw.githubusercontent.com/SFDO-Community/declarative-lookup-rollup-summaries/refs/heads/main/dlrs/libs/metadataservice/classes/MetadataService.cls -O m1.cls
    - name: Download Additional MetadataService.cls
      run: |
        wget https://raw.githubusercontent.com/certinia/apex-mdapi/refs/heads/master/apex-mdapi/src/classes/MetadataService.cls -O m2.cls
    - name: Run hyperfine benchmark
      run: |
        hyperfine --export-json hyperfine_results.json \
          './target/release/afmt -f m1.cls' \
          './target/release/afmt -f m2.cls'
    - name: Create docs directory
      run: mkdir -p docs
    - name: Generate Markdown Report
      run: |
        echo "# Benchmark Results" > docs/results.md
        echo "" >> docs/results.md
        echo "## Benchmark Summary" >> docs/results.md
        echo "" >> docs/results.md
        jq -r '.results[] | "### Command: \(.command)\n\nExecution Time: \(.mean) Â± \(.stddev) seconds\n\nMin: \(.min) seconds\nMax: \(.max) seconds\n\n"' hyperfine_results.json >> docs/results.md
    
    # mdBook steps
    - name: Install mdBook
      run: cargo install mdbook
    - name: Setup mdBook project
      run: |
        cd docs
        mdbook init --force
        echo '[output.html]' >> book.toml
        echo 'site-url = "/afmt/"' >> book.toml
        echo '# Summary' > SUMMARY.md
        echo '' >> SUMMARY.md
        echo '- [Benchmark Results](results.md)' >> SUMMARY.md
    - name: Build mdBook
      run: |
        cd docs
        mdbook build
    
    # Upload artifact for deployment job
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs/book

    # Commit and push changes
    - name: Commit and Push Changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Action"
        git add docs
        git commit -m "Update benchmark results and build mdBook" || echo "No changes to commit"
        git push origin main

  deploy:
    needs: benchmark
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
